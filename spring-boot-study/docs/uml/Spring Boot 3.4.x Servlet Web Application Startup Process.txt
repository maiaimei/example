@startuml
title Spring Boot 3.4.x Servlet Web Application Startup Process (Detailed)
skinparam backgroundColor #FFFFFF
skinparam handwritten false
skinparam ParticipantPadding 20
skinparam BoxPadding 10

participant "MainApplication" as App
participant SpringApplication
participant ApplicationProperties
participant WebApplicationType
participant SpringFactoriesLoader
participant DefaultBootstrapContext
participant ApplicationContextFactory
participant AnnotationConfigServletWebServerApplicationContext
participant GenericApplicationContext
participant AbstractApplicationContext
participant AnnotatedBeanDefinitionReader
participant ClassPathBeanDefinitionScanner
participant PostProcessorRegistrationDelegate
participant AbstractBeanFactory
participant ConfigurationClassPostProcessor
participant ConfigurationClassParser
participant ConfigurationClassBeanDefinitionReader
participant BeanFactoryPostProcessor
participant SpringApplicationRunListeners

App -> SpringApplication: SpringApplication.run(Class<?> primarySource, String... args)

== Create a new SpringApplication instance ==

activate SpringApplication

SpringApplication -> ApplicationProperties: new ApplicationProperties()
activate ApplicationProperties
return properties
deactivate ApplicationProperties

SpringApplication -> SpringApplication: new SpringApplication(Class<?> primarySource)
activate SpringApplication #98FB98
SpringApplication -> WebApplicationType: deduceFromClasspath()
activate SpringApplication #87CEEB
activate WebApplicationType
return WebApplicationType
deactivate WebApplicationType

SpringApplication -> ApplicationProperties: setWebApplicationType()
activate ApplicationProperties
note right: Internal property setting:\nthis.webApplicationType = type
ApplicationProperties --> SpringApplication
deactivate ApplicationProperties
deactivate SpringApplication

SpringApplication -> SpringApplication: getSpringFactoriesInstances(BootstrapRegistryInitializer.class)
activate SpringApplication #87CEEB
SpringApplication -> SpringFactoriesLoader: load()
note right: Load and instantiate the factory implementations of BootstrapRegistryInitializer from "META-INF/spring.factories"
activate SpringFactoriesLoader
return a list of BootstrapRegistryInitializer
note right: BootstrapRegistryInitializer is a powerful tool for early initialization and configuration in Spring Boot applications, \nespecially when you need to set up components before the main application context is created.
deactivate SpringFactoriesLoader
deactivate SpringApplication

SpringApplication -> SpringApplication: getSpringFactoriesInstances(ApplicationContextInitializer.class)
activate SpringApplication #87CEEB
SpringApplication -> SpringFactoriesLoader: load()
note right: Load and instantiate the factory implementations of ApplicationContextInitializer from "META-INF/spring.factories"
activate SpringFactoriesLoader
return a list of ApplicationContextInitializer
note right: ApplicationContextInitializer is a powerful tool for customizing the Spring application context during its initialization phase.
deactivate SpringFactoriesLoader
deactivate SpringApplication

SpringApplication -> SpringApplication: getSpringFactoriesInstances(ApplicationListener.class)
activate SpringApplication #87CEEB
SpringApplication -> SpringFactoriesLoader: load()
note right: Load and instantiate the factory implementations of ApplicationListener from "META-INF/spring.factories"
activate SpringFactoriesLoader
return a list of ApplicationListener
note right: ApplicationListener is a powerful tool for handling various types of events in Spring Boot applications, \nenabling loose coupling and flexible event-driven architectures.
deactivate SpringFactoriesLoader
deactivate SpringApplication
deactivate SpringApplication

== Run the Spring application, creating and refreshing a new ApplicationContext ==

SpringApplication -> SpringApplication: run(String... args)
activate SpringApplication #98FB98

SpringApplication -> SpringApplication: createBootstrapContext()
activate SpringApplication #87CEEB
SpringApplication -> DefaultBootstrapContext: new DefaultBootstrapContext()
activate DefaultBootstrapContext
return DefaultBootstrapContext
deactivate DefaultBootstrapContext
deactivate SpringApplication

SpringApplication -> SpringApplication: getRunListeners()
activate SpringApplication #87CEEB
SpringApplication -> SpringApplication: getSpringFactoriesInstances(SpringApplicationRunListener.class)
SpringApplication -> SpringFactoriesLoader: load()
note right: Load and instantiate the factory implementations of SpringApplicationRunListener from "META-INF/spring.factories"
activate SpringFactoriesLoader
return a list of SpringApplicationRunListener
note right: SpringApplicationRunListener is a powerful tool for monitoring and customizing the Spring Boot application startup process.
deactivate SpringFactoriesLoader
deactivate SpringApplication

SpringApplication -[#FF8700]> SpringApplicationRunListeners: <font color="#FF8700">starting()</font>
activate SpringApplicationRunListeners
SpringApplicationRunListeners --[#FF8700]> SpringApplication
deactivate SpringApplicationRunListeners

SpringApplication -> SpringApplication: prepareEnvironment()
activate SpringApplication #87CEEB
SpringApplication -> SpringApplication: getOrCreateEnvironment()
SpringApplication -> ApplicationContextFactory: createEnvironment()
activate ApplicationContextFactory
ApplicationContextFactory --> SpringApplication: ConfigurableEnvironment
deactivate ApplicationContextFactory
SpringApplication -> SpringApplication: configureEnvironment()
SpringApplication -[#FF8700]> SpringApplicationRunListeners: <font color="#FF8700">environmentPrepared()</font>
activate SpringApplicationRunListeners
SpringApplicationRunListeners --[#FF8700]> SpringApplication
deactivate SpringApplicationRunListeners
deactivate SpringApplication

SpringApplication -> SpringApplication: printBanner()

SpringApplication -> SpringApplication: createApplicationContext()
activate SpringApplication #87CEEB
SpringApplication -> ApplicationContextFactory: create()
activate ApplicationContextFactory
ApplicationContextFactory -> AnnotationConfigServletWebServerApplicationContext: new AnnotationConfigServletWebServerApplicationContext()
activate AnnotationConfigServletWebServerApplicationContext
AnnotationConfigServletWebServerApplicationContext -> GenericApplicationContext: super()
activate GenericApplicationContext
GenericApplicationContext -> GenericApplicationContext: this.beanFactory = new DefaultListableBeanFactory()
GenericApplicationContext --> AnnotationConfigServletWebServerApplicationContext
deactivate GenericApplicationContext
AnnotationConfigServletWebServerApplicationContext -> AnnotatedBeanDefinitionReader: this.reader = new AnnotatedBeanDefinitionReader(this)
activate AnnotatedBeanDefinitionReader
AnnotatedBeanDefinitionReader -> AnnotatedBeanDefinitionReader: initialize()
note right: AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry)\norg.springframework.context.annotation.internalConfigurationAnnotationProcessor\norg.springframework.context.annotation.internalAutowiredAnnotationProcessor\norg.springframework.context.annotation.internalCommonAnnotationProcessor\norg.springframework.context.event.internalEventListenerProcessor\norg.springframework.context.event.internalEventListenerFactory
AnnotatedBeanDefinitionReader --> AnnotationConfigServletWebServerApplicationContext
deactivate AnnotatedBeanDefinitionReader
AnnotationConfigServletWebServerApplicationContext -> ClassPathBeanDefinitionScanner: this.scanner = new ClassPathBeanDefinitionScanner(this)
activate ClassPathBeanDefinitionScanner
ClassPathBeanDefinitionScanner --> AnnotationConfigServletWebServerApplicationContext
deactivate ClassPathBeanDefinitionScanner
deactivate AnnotationConfigServletWebServerApplicationContext
AnnotationConfigServletWebServerApplicationContext --> ApplicationContextFactory: ConfigurableApplicationContext
ApplicationContextFactory --> SpringApplication: ConfigurableApplicationContext
deactivate ApplicationContextFactory
deactivate SpringApplication

SpringApplication -> SpringApplication: prepareContext()
activate SpringApplication #87CEEB
SpringApplication -> SpringApplication: setEnvironment()
SpringApplication -> SpringApplication: postProcessApplicationContext()
SpringApplication -> SpringApplication: applyInitializers(ConfigurableApplicationContext context)
SpringApplication -[#FF8700]> SpringApplicationRunListeners: <font color="#FF8700">contextPrepared()</font>
activate SpringApplicationRunListeners
SpringApplicationRunListeners --[#FF8700]> SpringApplication
deactivate SpringApplicationRunListeners
SpringApplication -> DefaultBootstrapContext: close(context)
activate DefaultBootstrapContext
DefaultBootstrapContext --> SpringApplication
deactivate DefaultBootstrapContext
SpringApplication -> SpringApplication: load()
note right: register bean definition: the startup class (also known as the main class) which is the entry point of the program
SpringApplication -[#FF8700]> SpringApplicationRunListeners: <font color="#FF8700">contextLoaded()</font>
activate SpringApplicationRunListeners
SpringApplicationRunListeners --[#FF8700]> SpringApplication
deactivate SpringApplicationRunListeners
deactivate SpringApplication

SpringApplication -> SpringApplication: refreshContext()
activate SpringApplication #87CEEB
SpringApplication -> AbstractApplicationContext: refresh()
activate AbstractApplicationContext

AbstractApplicationContext -> AbstractApplicationContext: invokeBeanFactoryPostProcessors(beanFactory)
activate AbstractApplicationContext
AbstractApplicationContext -> PostProcessorRegistrationDelegate: invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors)
activate PostProcessorRegistrationDelegate
PostProcessorRegistrationDelegate -> AbstractBeanFactory: <T> T getBean(String name, Class<T> requiredType)
activate AbstractBeanFactory
return ConfigurationClassPostProcessor
deactivate AbstractBeanFactory

PostProcessorRegistrationDelegate -> PostProcessorRegistrationDelegate: invokeBeanDefinitionRegistryPostProcessors(Collection<? extends BeanDefinitionRegistryPostProcessor> postProcessors, BeanDefinitionRegistry registry, ApplicationStartup applicationStartup)
note right: 使用BeanDefinitionRegistryPostProcessor注册Bean
activate PostProcessorRegistrationDelegate
PostProcessorRegistrationDelegate -> ConfigurationClassPostProcessor: postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)
activate ConfigurationClassPostProcessor
ConfigurationClassPostProcessor -> ConfigurationClassPostProcessor: processConfigBeanDefinitions(BeanDefinitionRegistry registry)
note right: 解析@ComponentScan\n处理@Bean方法\n处理@Import注解
activate ConfigurationClassPostProcessor

ConfigurationClassPostProcessor -> ConfigurationClassParser: parse(Set<BeanDefinitionHolder> configCandidates)
note right: ConfigurationClassParser#doProcessConfigurationClass
activate ConfigurationClassParser
ConfigurationClassParser --> ConfigurationClassPostProcessor
deactivate ConfigurationClassParser

deactivate ConfigurationClassPostProcessor
deactivate ConfigurationClassPostProcessor
deactivate PostProcessorRegistrationDelegate

PostProcessorRegistrationDelegate -> PostProcessorRegistrationDelegate: invokeBeanFactoryPostProcessors(Collection<? extends BeanFactoryPostProcessor> postProcessors, ConfigurableListableBeanFactory beanFactory)
activate PostProcessorRegistrationDelegate
PostProcessorRegistrationDelegate -> BeanFactoryPostProcessor: postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
note right: 使用BeanFactoryPostProcessor注册Bean
activate BeanFactoryPostProcessor
BeanFactoryPostProcessor --> PostProcessorRegistrationDelegate
deactivate BeanFactoryPostProcessor
deactivate PostProcessorRegistrationDelegate

PostProcessorRegistrationDelegate --> AbstractApplicationContext
deactivate PostProcessorRegistrationDelegate
deactivate AbstractApplicationContext

AbstractApplicationContext -> AbstractApplicationContext: registerBeanPostProcessors(beanFactory)

AbstractApplicationContext -> AbstractApplicationContext: initMessageSource()

AbstractApplicationContext -> AbstractApplicationContext: initApplicationEventMulticaster()

AbstractApplicationContext -> AbstractApplicationContext: onRefresh()

AbstractApplicationContext -> AbstractApplicationContext: registerListeners()

AbstractApplicationContext -> AbstractApplicationContext: finishBeanFactoryInitialization(beanFactory)

AbstractApplicationContext -> AbstractApplicationContext: finishRefresh()

AbstractApplicationContext --> SpringApplication
deactivate AbstractApplicationContext
deactivate SpringApplication

SpringApplication -> SpringApplication: afterRefresh()
SpringApplication -[#FF8700]> SpringApplicationRunListeners: <font color="#FF8700">started()</font>
activate SpringApplicationRunListeners
SpringApplicationRunListeners --[#FF8700]> SpringApplication
deactivate SpringApplicationRunListeners

SpringApplication -> SpringApplication: callRunners()
note right: ApplicationRunner\nCommandLineRunner

SpringApplication -[#FF8700]> SpringApplicationRunListeners: <font color="#FF8700">ready()</font>
activate SpringApplicationRunListeners
SpringApplicationRunListeners --[#FF8700]> SpringApplication
deactivate SpringApplicationRunListeners

SpringApplication --> App: return ApplicationContext
deactivate SpringApplication

@enduml
